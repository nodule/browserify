{
  "name": "browserify",
  "description": "Browserify for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/browserify.git"
  },
  "dependencies": {
    "browserify": "3.x.x"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "browserify": {
            "title": "Browserify",
            "type": "Browserify"
          },
          "file": {
            "title": "File",
            "type": "string"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Adding entry file {{input.file}}"
      },
      "description": "Add an entry file from file that will be executed when the bundle loads.",
      "title": "Add File",
      "ns": "browserify",
      "name": "add",
      "fn": "input.browserify.add(input.file);\n"
    },
    {
      "dependencies": {
        "npm": {
          "browserify": "3.x.x"
        }
      },
      "ports": {
        "input": {},
        "output": {
          "browserify": {
            "title": "Browserify",
            "type": "Browserify"
          }
        }
      },
      "phrases": {
        "active": "Loading Browserify"
      },
      "description": "Browserfiy",
      "title": "Browserify",
      "ns": "browserify",
      "name": "api",
      "fn": "output.browserify = browserify();\n"
    },
    {
      "ports": {
        "input": {
          "browserify": {
            "title": "Browserify",
            "type": "Browserify"
          },
          "file": {
            "title": "File",
            "type": "string"
          },
          "insertGlobals": {
            "title": "Insert Globals",
            "type": "boolean",
            "description": "When opts.insertGlobals is true, always insert process, global, __filename, and __dirname without analyzing the AST for faster builds but larger output bundles",
            "default": false
          },
          "detectGlobals": {
            "title": "Detect Globals",
            "type": "boolean",
            "description": "When opts.detectGlobals is true, scan all files for process, global, __filename, and __dirname, defining as necessary. With this option npm modules are more likely to work but bundling takes longer.",
            "default": true
          },
          "debug": {
            "title": "Debug",
            "type": "boolean",
            "description": "When opts.debug is true, add a source map inline to the end of the bundle. This makes debugging easier because you can see all the original files if you are in a modern enough browser.",
            "default": false
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "src": {
            "title": "Source",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Bundling to {{input.file}}"
      },
      "description": "Bundle the files and their dependencies into a single javascript file.",
      "title": "Bundle",
      "ns": "browserify",
      "name": "bundle",
      "fn": "var opts = {};\nif(input.insertGlobals) opts.insertGlobals = input.insertGlobals;\nif(input.detectGlobals) opts.detectGlobals = input.detectGlobals;\nif(input.debug) opts.debug = input.debug;\nif(Object.keys(opts).length) {\n  output = [input.browserify, 'bundle', opts];\n} else {\n  output = [input.browserify, 'bundle'];\n}\n"
    },
    {
      "ports": {
        "input": {
          "browserify": {
            "title": "Browserify",
            "type": "Browserify"
          },
          "file": {
            "title": "File",
            "type": "string"
          },
          "baseDir": {
            "title": "Base Dir",
            "type": "string",
            "default": null
          },
          "expose": {
            "title": "Expose",
            "description": "Custom dependency name",
            "type": "string",
            "default": null
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Require {{input.file}}"
      },
      "description": "Make file available from outside the bundle with require(file).",
      "title": "Require",
      "ns": "browserify",
      "name": "require",
      "fn": "var opts = {};\nif(input.basedir) opts.basedir = input.basedir;\nif(input.expose) opts.expose = input.expose;\n\ninput.browserify.require(input.file, opts);\n"
    }
  ],
  "twigs": []
}